/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View.GUI;

import javax.swing.JFrame;
import java.util.ArrayList;
import javax.swing.JOptionPane;

import View.DeepSpaceView;
import controller.Controller;

import deepspace.GameState;

//import deepspace.Weapon;
//import deepspace.WeaponType;

/**
 *
 * @author manuel
 */
public class MainWindow extends JFrame implements DeepSpaceView{
    
    private static MainWindow instance = null;
    private String nombrePrograma;
    
    private EnemyView enemyView;
    private SpaceStationView spaceStationView;
    
    //private WeaponView armacheck = new WeaponView();
    
    public static MainWindow getInstance (){
        if (instance == null){
                instance = new MainWindow();
        }
        return instance;
    }
   
    
    /**
     * Creates new form MainWindow
     */
    private MainWindow() {
        initComponents();
        nombrePrograma = "DeepSpace";
        setTitle(nombrePrograma);
        
        setLocationRelativeTo (null);
        enemyView = new EnemyView();
        spaceStationView = new SpaceStationView();
        
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e){
                Controller.getInstance().finish(0);
            }
        });
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelParaProbar = new javax.swing.JPanel();
        enemyPanel = new javax.swing.JPanel();
        spaceStationPanel = new javax.swing.JPanel();
        combatButton = new javax.swing.JButton();
        nextTurnButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        combatButton.setText("¡COMBATIR!");
        combatButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        combatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combatButtonActionPerformed(evt);
            }
        });

        nextTurnButton.setText("SIGUIENTE TURNO");
        nextTurnButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        nextTurnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextTurnButtonActionPerformed(evt);
            }
        });

        exitButton.setText("SALIR");
        exitButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PanelParaProbar, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(combatButton, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(175, 175, 175)
                        .addComponent(nextTurnButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(188, 188, 188)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(spaceStationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 658, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(enemyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 662, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(enemyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
                    .addComponent(spaceStationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(PanelParaProbar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(combatButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nextTurnButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(21, 21, 21))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void combatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combatButtonActionPerformed
        Controller.getInstance().combat();
        updateView();
        revalidate();
    }//GEN-LAST:event_combatButtonActionPerformed

    private void nextTurnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextTurnButtonActionPerformed
        Controller.getInstance().nextTurn();
        updateView();
        revalidate();
    }//GEN-LAST:event_nextTurnButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        Controller.getInstance().finish(0);
    }//GEN-LAST:event_exitButtonActionPerformed
    
    // Al no implementar método de la interfaz no se pone @Override
    public String getAppName() {
        return nombrePrograma;
    }
    
    @Override
    public void updateView(){
        
        spaceStationView.setSpaceStation(Controller.getInstance().getUIversion().getCurrentStation());
        spaceStationPanel.add(spaceStationView);
        
        enemyView.setEnemy(Controller.getInstance().getUIversion().getCurrentEnemy());
        enemyPanel.add(enemyView);
        
        GameState gameState = Controller.getInstance().getState();
        if(gameState == GameState.INIT){
            
            combatButton.setEnabled(true);
            nextTurnButton.setEnabled(false);
        }
        if(gameState == GameState.BEFORECOMBAT){
            
            combatButton.setEnabled(true);
            nextTurnButton.setEnabled(false);
        }
        if(gameState == GameState.AFTERCOMBAT){
            
            combatButton.setEnabled(false);
            nextTurnButton.setEnabled(true);
        }
        
        repaint();
        revalidate();
    }
    
    
    /*
        MÉTODO DE PRUEBA PROBAR UN ARMA, CAMBIAR EL MÉTODO
        getUIversion A PÚBLICO
        PARA PROBARLO DESCOMENTAR ESTE MÉTODO EN ESTA CLASE,
        EN LA INTERFAZ View/DeepSpaceView.java Y EN EL
        MÉTODO start DEL ARCHIVO controller/Controller.java
    */
    /*
    @Override
    public void probarArma(){
        
        Weapon hola = new Weapon("Hola", WeaponType.LASER, 2);
        
        armacheck.setWeapon(hola.getUIversion());
        PanelParaProbar.add(armacheck);
        repaint();
        revalidate();
    }
    */
    
    @Override
    public void showView() {
         this.setVisible(true);
    }

    @Override
    public ArrayList<String> readNamePlayers() {
        ReadNamePlayers readNamePlayers = new ReadNamePlayers (this);
        return readNamePlayers.getNames();
    }

    @Override
    public boolean confirmExitMessage() {
        return (JOptionPane.showConfirmDialog(this, "¿Estás segur@ que deseas salir?", getAppName(), JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION);
    }

    @Override
    public void nextTurnNotAllowedMessage() {
        JOptionPane.showMessageDialog(this, "No puedes avanzar de turno, no has cumplido tu castigo.\nCúmplelo o sufre la ira de Lord Vader.", getAppName(), JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void lostCombatMessage() {
        JOptionPane.showMessageDialog(this, "Has PERDIDO el combate. \nDescarta los suplementos correspondientes.", getAppName(), JOptionPane.INFORMATION_MESSAGE);
    }

    @Override
    public void escapeMessage() {
        JOptionPane.showMessageDialog(this, "Has logrado ESCAPAR. \nVete con LukeSkywalker a Dagobah.", getAppName(), JOptionPane.INFORMATION_MESSAGE);
    }

    @Override
    public void wonCombatMessage() {
        JOptionPane.showMessageDialog(this, "Has GANADO el combate. \nHas recibido un gran botín.", getAppName(), JOptionPane.INFORMATION_MESSAGE);
    }

    @Override
    public void wonGameMessage() {
        JOptionPane.showMessageDialog(this, "¡BRAVO!. \n¡Has ganado! Eres un gran piloto como Han Solo", getAppName(), JOptionPane.INFORMATION_MESSAGE);
    }

    @Override
    public void conversionMessage() {
        
        if(Controller.getInstance().getUIversion().getCurrentEnemy().getLoot().isGetEfficient()){
            JOptionPane.showMessageDialog(this, "Has GANADO el combate. \nAdemás te has CONVERTIDO en una estación EFICIENTE. \nDisfruta de tu botín.", getAppName(), JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            JOptionPane.showMessageDialog(this, "Has GANADO el combate. \nAdemás te has CONVERTIDO en una CIUDAD ESPACIAL (como Bespin). \nDisfruta de tu botín.", getAppName(), JOptionPane.INFORMATION_MESSAGE);
        }    }

    @Override
    public void noCombatMessage() {
        JOptionPane.showMessageDialog(this, "No puedes combatir en este momento.", getAppName(), JOptionPane.ERROR_MESSAGE);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelParaProbar;
    private javax.swing.JButton combatButton;
    private javax.swing.JPanel enemyPanel;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton nextTurnButton;
    private javax.swing.JPanel spaceStationPanel;
    // End of variables declaration//GEN-END:variables
}
